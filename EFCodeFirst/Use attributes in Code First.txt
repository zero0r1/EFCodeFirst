Length字长:
Convention默认规则			max (type specified by database)max(类型由数据库指定)
Data Annotation				MinLength(nn)MaxLength(nn)StringLength(nn)
Fluent						Entity<T>.Property(t=>t.PropertyName).HasMaxLength(nn)

数据类型:
Convention默认规则			The default column data type is determined by the database provider you are using. For SQL Server some example default data types are:默认的列数据类型由数据库决定，对SQL Server而言如下：String : nvarchar(max)Integer:intByte Array:varbinary(max)Boolen:bit
Data Annotation				Column(TypeName="XXX")
Fluent						Entity<T>.Property(t=>t.PropertyName).HasColumnType("XXX")

可空性和必需项配置:
Convention默认规则			Key Properties : not null in database键属性：在数据库中为非空Reference Types (String, arrays): null in the database引用类型（String,数组）：在数据库中可空Value Types (all numeric types, DateTime, bool, char) : not null in database值类型（所有数字类型，日期，布尔，字符）：在数据库为非空Nullable<T> Value Types : null in databaseNullable<T>值类型（可空类型）：在数据库可空
Data Annotation				Required
Fluent						Entity<T>.Property(t=>t.PropertyName).IsRequired

映射键:
Convention默认规则			Properties named Id属性名为IdProperties named [TypeName] + Id属性名为[类型名]+Id
Data Annotation				Key
Fluent						Entity<T>.HasKey(t=>t.PropertyName

配置数据库生成的属性:
Convention默认规则			Integer keys:Identity整型键值：标识列
Data Annotation				DatabaseGenerated(DatabaseGeneratedOption)
Fluent						Entity<T>.Property(t=>t.PropertyName).HasDatabaseGeneratedOption(DatabaseGeneratedOption)

为开放式并发环境配置-
-时间戳或行版本字段:
Convention默认规则			None无
Data Annotation				TimeStamp
Fluent						Entity<T>.Property(t=>t.PropertyName).IsRowVersion()

配置并发非时间戳字段:
Convention默认规则			None无
Data Annotation				ConcurrencyCheck
Fluent						Entity<T>.Property(t=>t.PropertyName).IsConcurrencyToken()

映射到非-Unicode-
-数据库类型:
Convention默认规则			All strings map to Unicode-encoded database types所有的字符串都映射到Unicode数据库类型
Data Annotation				不可用
Fluent						Entity<T>.Property(t=>t.PropertyName).IsUnicode(boolean)

对Decimal固定有效位数-
-和小数位数的影响:
Convention默认规则			Decimals are 18, 2
Data Annotation				不可用
Fluent						Entity<T>.Property(t=>t.PropertyName).HasPrecision(n,n)


指定复杂类型:
Data Annotation				System.ComponentModel.DataAnnotations.Schema => [ComplexType],Data Annotation提供了ComplexType特性应用于类上。
Fluent						modelBuilder.ComplexType<Address>();


使用Fluent API配置打开或关闭客户端级联删除功能

Data Annotations			不可用
Fluent						HasRequired(l = >l.Destination).WithMany(d = >d.Lodgings).WillCascadeOnDelete(false)


避免类型包含进模型中:
NOTE: 一个典型的不想储存在数据库中的属性例子是在类中使用其他属性计算出来的属性。
例如，你可能想很容易地访问一个人的full name，这是根据First Name和Last Name合并计算得到的。
类可以计算它而没有必要将其存进数据库。
默认规则里，所有同时拥有get和set访问器的公开属性都会包含进模型中。
如果一个属性有get或set访问器，也不会被包含进模型中。
如果你在Person类中有FullName属性，可以只设置get访问器而不设置set访问器来实现排除在映射之外。
public string FullName {
    get {
        return String.Format("{0} {1}", FirstName.Trim(), LastName);
    }
}

但是，你可以还会有一些同时拥有get和set访问器的属性不想持久化到数据库。
这个时候就可以使用: 
忽略属性

使用 Annotations来-			[NotMapped]public class MyInMemoryOnlyClass
-忽略类型					
使用 Fluent配置来-			modelBuilder.Ignore<MyInMemoryOnlyClass>();
-忽略类型					

属性的可访问性，Getters和Setters
1.public属性将会被Code First自动映射。
2.Set访问器可以用更严格的访问规则界定，但get访问器必须保持public才能被自动映射;
3.非公开的属性必须使用Fluent API配置才能被Code First所映射;
对于非公开属性，这意味只有执行配置的位置才能访问该属性.

//控制由Code First生产的外键
//使用 FluentApi MapKey Function 定义外键
//变更外键列名只能通过Fluent API.你可以使用Map方法来控制的映射,也可使用Map方法来控制关系的映射.
HasRequired(l => l.Destination).WithMany(d => d.Lodgings).Map(c => c.MapKey("DestinationId"));